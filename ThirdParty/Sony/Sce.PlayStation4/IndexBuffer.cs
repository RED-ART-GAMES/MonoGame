//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sce.PlayStation4
{
    namespace Graphics
    {
        public unsafe partial class IndexBuffer : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 40)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBufferC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBufferC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBufferC2EPNS_14GraphicsSystemENS_12IndexElementEi")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr system, Graphics.IndexElement type, int indexCount);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBufferD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBuffer7SetDataEiPhib")]
                internal static extern void SetData_0(global::System.IntPtr instance, int offsetInBytes, byte* data, int bytes, bool discard);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics11IndexBuffer7GetDataEiPhi")]
                internal static extern void GetData_0(global::System.IntPtr instance, int offsetInBytes, byte* data, int bytes);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal IndexBuffer(IndexBuffer.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal IndexBuffer(IndexBuffer.Internal native)
                : this(&native)
            {
            }

            public IndexBuffer(global::System.IntPtr native, bool isInternalImpl = false)
            {
                __Instance = native;
            }

            public IndexBuffer(Graphics.GraphicsSystem system, Graphics.IndexElement type, int indexCount)
            {
                __Instance = Marshal.AllocHGlobal(40);
                var arg0 = system == (Graphics.GraphicsSystem) null ? global::System.IntPtr.Zero : system.__Instance;
                var arg1 = type;
                var arg2 = indexCount;
                Internal.ctor_2(__Instance, arg0, arg1, arg2);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Internal.dtor_0(__Instance);
                Marshal.FreeHGlobal(__Instance);
            }

            public virtual void SetData(int offsetInBytes, byte* data, int bytes, bool discard)
            {
                var arg0 = offsetInBytes;
                var arg1 = data;
                var arg2 = bytes;
                Internal.SetData_0(__Instance, arg0, arg1, arg2, discard);
            }

            public virtual void GetData(int offsetInBytes, byte* data, int bytes)
            {
                var arg0 = offsetInBytes;
                var arg1 = data;
                var arg2 = bytes;
                Internal.GetData_0(__Instance, arg0, arg1, arg2);
            }
        }
    }
}
