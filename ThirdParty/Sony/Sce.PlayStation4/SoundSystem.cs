//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sce.PlayStation4
{
    namespace Audio
    {
        public enum PlaybackEvent
        {
            Play = 0,
            StopAsAuthored = 1,
            StopImmediate = 2,
            Pause = 4,
            Resume = 5
        }

        public unsafe partial class SoundSystem : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 112)]
            public partial struct Internal
            {
                [FieldOffset(104)]
                public uint MAX_VOICES;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystemC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystemC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystem10InitializeEv")]
                internal static extern void Initialize_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystem19SubmitPlaybackEventEPNS_12SamplerVoiceEPNS_11AudioBufferENS_13PlaybackEventEi")]
                internal static extern void SubmitPlaybackEvent_0(global::System.IntPtr instance, global::System.IntPtr voiceHandle, global::System.IntPtr buffer, Audio.PlaybackEvent evt, int portHandle);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystem18OpenControllerPortEij")]
                internal static extern void OpenControllerPort_0(global::System.IntPtr instance, int playerIdx, uint userID);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Audio11SoundSystem19CloseControllerPortEi")]
                internal static extern void CloseControllerPort_0(global::System.IntPtr instance, int playerIdx);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal SoundSystem(SoundSystem.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal SoundSystem(SoundSystem.Internal native)
                : this(&native)
            {
            }

            public SoundSystem(global::System.IntPtr native, bool isInternalImpl = false)
            {
                __Instance = native;
            }

            protected SoundSystem()
            {
                __Instance = Marshal.AllocHGlobal(112);
                Internal.ctor_0(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Marshal.FreeHGlobal(__Instance);
            }

            public void Initialize()
            {
                Internal.Initialize_0(__Instance);
            }

            public void SubmitPlaybackEvent(Audio.SamplerVoice voiceHandle, Audio.AudioBuffer buffer, Audio.PlaybackEvent evt, int portHandle)
            {
                var arg0 = voiceHandle == (Audio.SamplerVoice) null ? global::System.IntPtr.Zero : voiceHandle.__Instance;
                var arg1 = buffer == (Audio.AudioBuffer) null ? global::System.IntPtr.Zero : buffer.__Instance;
                var arg2 = evt;
                Internal.SubmitPlaybackEvent_0(__Instance, arg0, arg1, arg2, portHandle);
            }

            public void OpenControllerPort(int playerIdx, uint userID)
            {
                var arg1 = userID;
                Internal.OpenControllerPort_0(__Instance, playerIdx, arg1);
            }

            public void CloseControllerPort(int playerIdx)
            {
                Internal.CloseControllerPort_0(__Instance, playerIdx);
            }

            public uint MAX_VOICES
            {
                get
                {
                    var __ptr = (Internal*)__Instance.ToPointer();
                    return __ptr->MAX_VOICES;
                }
            }
        }
    }
}
