//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sce.PlayStation4
{
    namespace System
    {
        public enum SystemServiceResult
        {
            Ok = 0,
            ErrorInternal = -2136932351,
            ErrorUnavailable = -2136932350,
            ErrorParameter = -2136932349,
            ErrorNoEvent = -2136932348,
            ErrorRejected = -2136932347,
            ErrorNeedDisplaySafeAreaSettings = -2136932346
        }

        public enum SystemLang
        {
            Japanese = 0,
            English_UnitedStates = 1,
            French = 2,
            Spanish = 3,
            German = 4,
            Italian = 5,
            Dutch = 6,
            Portuguese_Portugal = 7,
            Russian = 8,
            Korean = 9,
            Chinese_Traditional = 10,
            Chinese_Simplified = 11,
            Finnish = 12,
            Swedish = 13,
            Danish = 14,
            Norwegian = 15,
            Polish = 16,
            Portuguese_Brazil = 17,
            English_UnitedKingdom = 18,
            Turkish = 19,
            Spanish_LatinAmerica = 20
        }

        public enum SystemDateFormat
        {
            YearMonthDay = 0,
            DayMonthYear = 1,
            MonthDayYear = 2
        }

        public enum SystemTimeFormat
        {
            TwelveHour = 0,
            TwentyFourHour = 1
        }

        public enum GpuLoadEmulationMode
        {
            Off = 0,
            Normal = 1,
            High = 2
        }

        public enum SystemServiceEvent
        {
            OnResume = 268435456,
            GameLiveStreamingStatusUpdate = 268435457,
            SessionInvitation = 268435458,
            EntitlementUpdate = 268435459,
            GameCustomData = 268435460,
            DisplaySafeAreaUpdate = 268435461
        }

        public enum SystemServiceRenderingMode
        {
            Base = 0,
            NeoHighResolution = 1,
            NeoEnhancedFullHD = 2,
            NeoFullHD = 3
        }

        public unsafe static partial class SystemService
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService12ReceiveEventEPNS_18SystemServiceEventE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool ReceiveEvent_0(System.SystemServiceEvent* eventType);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService16HideSplashScreenEv")]
                internal static extern void HideSplashScreen_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService18DisableMusicPlayerEv")]
                internal static extern void DisableMusicPlayer_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService19ReenableMusicPlayerEv")]
                internal static extern void ReenableMusicPlayer_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService22GetDisplaySafeAreaInfoEPf")]
                internal static extern System.SystemServiceResult GetDisplaySafeAreaInfo_0(float* ratio);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService9IsNeoModeEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool IsNeoMode_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService19GetNumRecieveEventsEv")]
                internal static extern int GetNumRecieveEvents_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService11GetLanguageEv")]
                internal static extern System.SystemLang GetLanguage_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService13GetDateFormatEv")]
                internal static extern System.SystemDateFormat GetDateFormat_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService13GetTimeFormatEv")]
                internal static extern System.SystemTimeFormat GetTimeFormat_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService17GetTimeZoneOffsetEv")]
                internal static extern int GetTimeZoneOffset_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService24GetIsDaylightSavingsTimeEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool GetIsDaylightSavingsTime_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService21GetIsSystemUIOverlaidEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool GetIsSystemUIOverlaid_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService26GetIsInBackgroundExecutionEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool GetIsInBackgroundExecution_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService23GetGpuLoadEmulationModeEv")]
                internal static extern System.GpuLoadEmulationMode GetGpuLoadEmulationMode_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService23SetGpuLoadEmulationModeENS_20GpuLoadEmulationModeE")]
                internal static extern void SetGpuLoadEmulationMode_0(System.GpuLoadEmulationMode mode);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN6System13SystemService16GetRenderingModeEv")]
                internal static extern System.SystemServiceRenderingMode GetRenderingMode_0();
            }

            internal static bool ReceiveEvent(out System.SystemServiceEvent eventType)
            {
                System.SystemServiceEvent _eventType;
                var arg0 = &_eventType;
                var __ret = Internal.ReceiveEvent_0(arg0);
                eventType = _eventType;
                return __ret;
            }

            public static void HideSplashScreen()
            {
                Internal.HideSplashScreen_0();
            }

            public static void DisableMusicPlayer()
            {
                Internal.DisableMusicPlayer_0();
            }

            public static void ReenableMusicPlayer()
            {
                Internal.ReenableMusicPlayer_0();
            }

            public static System.SystemServiceResult GetDisplaySafeAreaInfo(out float ratio)
            {
                float _ratio;
                var arg0 = &_ratio;
                var __ret = Internal.GetDisplaySafeAreaInfo_0(arg0);
                ratio = _ratio;
                return __ret;
            }

            public static bool IsNeoMode()
            {
                var __ret = Internal.IsNeoMode_0();
                return __ret;
            }

            internal static int NumRecieveEvents
            {
                get
                {
                    var __ret = Internal.GetNumRecieveEvents_0();
                    return __ret;
                }
            }

            public static System.SystemLang Language
            {
                get
                {
                    var __ret = Internal.GetLanguage_0();
                    return __ret;
                }
            }

            public static System.SystemDateFormat DateFormat
            {
                get
                {
                    var __ret = Internal.GetDateFormat_0();
                    return __ret;
                }
            }

            public static System.SystemTimeFormat TimeFormat
            {
                get
                {
                    var __ret = Internal.GetTimeFormat_0();
                    return __ret;
                }
            }

            public static int TimeZoneOffset
            {
                get
                {
                    var __ret = Internal.GetTimeZoneOffset_0();
                    return __ret;
                }
            }

            public static bool IsDaylightSavingsTime
            {
                get
                {
                    var __ret = Internal.GetIsDaylightSavingsTime_0();
                    return __ret;
                }
            }

            public static bool IsSystemUIOverlaid
            {
                get
                {
                    var __ret = Internal.GetIsSystemUIOverlaid_0();
                    return __ret;
                }
            }

            public static bool IsInBackgroundExecution
            {
                get
                {
                    var __ret = Internal.GetIsInBackgroundExecution_0();
                    return __ret;
                }
            }

            public static System.GpuLoadEmulationMode GpuLoadEmulationMode
            {
                get
                {
                    var __ret = Internal.GetGpuLoadEmulationMode_0();
                    return __ret;
                }

                set
                {
                    var arg0 = value;
                    Internal.SetGpuLoadEmulationMode_0(arg0);
                }
            }

            public static System.SystemServiceRenderingMode RenderingMode
            {
                get
                {
                    var __ret = Internal.GetRenderingMode_0();
                    return __ret;
                }
            }
        }
    }
}
