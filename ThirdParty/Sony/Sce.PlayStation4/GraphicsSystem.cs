//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sce.PlayStation4
{
    namespace Graphics
    {
        public unsafe partial class GraphicsSystem : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 128)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystemC2ERKS0_")]
                internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystemC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystemD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem10InitializeEiiNS_13TextureFormatENS_11DepthFormatE")]
                internal static extern void Initialize_0(global::System.IntPtr instance, int backbufferWidth, int backbufferHeight, Graphics.TextureFormat backbufferFormat, Graphics.DepthFormat depthFormat);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem16SetRenderTargetsEPNS_12RenderTargetES2_S2_S2_")]
                internal static extern void SetRenderTargets_0(global::System.IntPtr instance, global::System.IntPtr target0, global::System.IntPtr target1, global::System.IntPtr target2, global::System.IntPtr target3);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem5ClearENS_12ClearOptionsEfffffi")]
                internal static extern void Clear_0(global::System.IntPtr instance, Graphics.ClearOptions options, float r, float g, float b, float a, float depth, int stencil);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem7PresentEv")]
                internal static extern void Present_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem21DrawIndexedPrimitivesENS_13PrimitiveTypeEiii")]
                internal static extern void DrawIndexedPrimitives_0(global::System.IntPtr instance, Graphics.PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem14DrawPrimitivesENS_13PrimitiveTypeEii")]
                internal static extern void DrawPrimitives_0(global::System.IntPtr instance, Graphics.PrimitiveType primitiveType, int vertexStart, int vertexCount);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem10SetTextureEiPNS_7TextureE")]
                internal static extern void SetTexture_0(global::System.IntPtr instance, int slot, global::System.IntPtr texture);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem15SetSamplerStateEijjjj")]
                internal static extern void SetSamplerState_0(global::System.IntPtr instance, int slot, uint desc0, uint desc1, uint desc2, uint desc3);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem11SetViewportEiiiiff")]
                internal static extern void SetViewport_0(global::System.IntPtr instance, int left, int top, int width, int height, float minDepth, float maxDepth);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem19SetScissorRectangleEiiii")]
                internal static extern void SetScissorRectangle_0(global::System.IntPtr instance, int left, int top, int right, int bottom);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem15SetVertexShaderEPNS_12VertexShaderEPNS_11FetchShaderE")]
                internal static extern void SetVertexShader_0(global::System.IntPtr instance, global::System.IntPtr shader, global::System.IntPtr fetch);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem18SetShaderConstantsENS_11ShaderStageEPvj")]
                internal static extern void SetShaderConstants_0(global::System.IntPtr instance, Graphics.ShaderStage stage, void* data, uint sizeInBytes);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem18CreateSamplerStateENS_13TextureFilterENS_18TextureAddressModeES2_S2_iifRjS3_S3_S3_")]
                internal static extern void CreateSamplerState_0(Graphics.TextureFilter filter, Graphics.TextureAddressMode addressU, Graphics.TextureAddressMode addressV, Graphics.TextureAddressMode addressW, int maxAnisotropy, int maxMipLevel, float mipMapLevelOfDetailBias, uint* desc0, uint* desc1, uint* desc2, uint* desc3);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem21CreateRasterizerStateENS_8CullModeENS_8FillModeEbbRjS3_")]
                internal static extern void CreateRasterizerState_0(Graphics.CullMode cullMode, Graphics.FillMode fillMode, bool multiSampleAntiAlias, bool scissorTestEnable, uint* prim0, uint* flag1);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem18SetRasterizerStateEjjff")]
                internal static extern void SetRasterizerState_0(global::System.IntPtr instance, uint prim0, uint desc1, float depthBias, float slopeScaleDepthBias);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem23CreateDepthStencilStateEbbNS_16StencilOperationES1_NS_15CompareFunctionES1_S2_hS1_bS1_S2_hS1_hbRjS3_S3_")]
                internal static extern void CreateDepthStencilState_0(bool depthBufferEnable, bool depthBufferWriteEnable, Graphics.StencilOperation ccwStencilDepthFail, Graphics.StencilOperation ccwStencilFail, Graphics.CompareFunction ccwStencilFunction, Graphics.StencilOperation ccwStencilPass, Graphics.CompareFunction depthBufferFunction, byte referenceStencil, Graphics.StencilOperation stencilDepthBufferFail, bool stencilEnable, Graphics.StencilOperation stencilFail, Graphics.CompareFunction stencilFunction, byte stencilMask, Graphics.StencilOperation stencilPass, byte stencilWriteMask, bool twoSidedStencilMode, uint* depth0, uint* stencil0, uint* stencil1);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem20SetDepthStencilStateEjjj")]
                internal static extern void SetDepthStencilState_0(global::System.IntPtr instance, uint depth0, uint stencil0, uint stencil1);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem16CreateBlendStateENS_5BlendES1_NS_13BlendFunctionES1_S1_S2_Rj")]
                internal static extern void CreateBlendState_0(Graphics.Blend colorSourceBlend, Graphics.Blend colorDestBlend, Graphics.BlendFunction colorBlendFunc, Graphics.Blend alphaSourceBlend, Graphics.Blend alphaDestBlend, Graphics.BlendFunction alphaBlendFunc, uint* blend);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem13SetBlendStateEjjjjj")]
                internal static extern void SetBlendState_0(global::System.IntPtr instance, uint blend0, uint blend1, uint blend2, uint blend3, uint colorWrites);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem9SetMarkerEPKcj")]
                internal static extern void SetMarker_0(global::System.IntPtr instance, global::System.IntPtr markerName, uint rgbColor);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem10PushMarkerEPKcj")]
                internal static extern void PushMarker_0(global::System.IntPtr instance, global::System.IntPtr markerName, uint rgbColor);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem9PopMarkerEv")]
                internal static extern void PopMarker_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem15SetVertexBufferEPNS_12VertexBufferE")]
                internal static extern void SetVertexBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem14SetIndexBufferEPNS_11IndexBufferE")]
                internal static extern void SetIndexBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8Graphics14GraphicsSystem14SetPixelShaderEPNS_11PixelShaderE")]
                internal static extern void SetPixelShader_0(global::System.IntPtr instance, global::System.IntPtr shader);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal GraphicsSystem(GraphicsSystem.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal GraphicsSystem(GraphicsSystem.Internal native)
                : this(&native)
            {
            }

            public GraphicsSystem(global::System.IntPtr native, bool isInternalImpl = false)
            {
                __Instance = native;
            }

            public GraphicsSystem()
            {
                __Instance = Marshal.AllocHGlobal(128);
                Internal.ctor_1(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Internal.dtor_0(__Instance);
                Marshal.FreeHGlobal(__Instance);
            }

            public void Initialize(int backbufferWidth, int backbufferHeight, Graphics.TextureFormat backbufferFormat, Graphics.DepthFormat depthFormat)
            {
                var arg2 = backbufferFormat;
                var arg3 = depthFormat;
                Internal.Initialize_0(__Instance, backbufferWidth, backbufferHeight, arg2, arg3);
            }

            public void SetRenderTargets(Graphics.RenderTarget target0, Graphics.RenderTarget target1, Graphics.RenderTarget target2, Graphics.RenderTarget target3)
            {
                var arg0 = target0 == (Graphics.RenderTarget) null ? global::System.IntPtr.Zero : target0.__Instance;
                var arg1 = target1 == (Graphics.RenderTarget) null ? global::System.IntPtr.Zero : target1.__Instance;
                var arg2 = target2 == (Graphics.RenderTarget) null ? global::System.IntPtr.Zero : target2.__Instance;
                var arg3 = target3 == (Graphics.RenderTarget) null ? global::System.IntPtr.Zero : target3.__Instance;
                Internal.SetRenderTargets_0(__Instance, arg0, arg1, arg2, arg3);
            }

            public void Clear(Graphics.ClearOptions options, float r, float g, float b, float a, float depth, int stencil)
            {
                var arg0 = options;
                Internal.Clear_0(__Instance, arg0, r, g, b, a, depth, stencil);
            }

            public void Present()
            {
                Internal.Present_0(__Instance);
            }

            public void DrawIndexedPrimitives(Graphics.PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount)
            {
                var arg0 = primitiveType;
                Internal.DrawIndexedPrimitives_0(__Instance, arg0, baseVertex, startIndex, primitiveCount);
            }

            public void DrawPrimitives(Graphics.PrimitiveType primitiveType, int vertexStart, int vertexCount)
            {
                var arg0 = primitiveType;
                Internal.DrawPrimitives_0(__Instance, arg0, vertexStart, vertexCount);
            }

            public void SetTexture(int slot, Graphics.Texture texture)
            {
                var arg1 = texture == (Graphics.Texture) null ? global::System.IntPtr.Zero : texture.__Instance;
                Internal.SetTexture_0(__Instance, slot, arg1);
            }

            public void SetSamplerState(int slot, uint desc0, uint desc1, uint desc2, uint desc3)
            {
                var arg1 = desc0;
                var arg2 = desc1;
                var arg3 = desc2;
                var arg4 = desc3;
                Internal.SetSamplerState_0(__Instance, slot, arg1, arg2, arg3, arg4);
            }

            public void SetViewport(int left, int top, int width, int height, float minDepth, float maxDepth)
            {
                Internal.SetViewport_0(__Instance, left, top, width, height, minDepth, maxDepth);
            }

            public void SetScissorRectangle(int left, int top, int right, int bottom)
            {
                Internal.SetScissorRectangle_0(__Instance, left, top, right, bottom);
            }

            public void SetVertexShader(Graphics.VertexShader shader, Graphics.FetchShader fetch)
            {
                var arg0 = shader == (Graphics.VertexShader) null ? global::System.IntPtr.Zero : shader.__Instance;
                var arg1 = fetch == (Graphics.FetchShader) null ? global::System.IntPtr.Zero : fetch.__Instance;
                Internal.SetVertexShader_0(__Instance, arg0, arg1);
            }

            public void SetShaderConstants(Graphics.ShaderStage stage, void* data, uint sizeInBytes)
            {
                var arg0 = stage;
                var arg1 = data;
                var arg2 = sizeInBytes;
                Internal.SetShaderConstants_0(__Instance, arg0, arg1, arg2);
            }

            public void SetRasterizerState(uint prim0, uint desc1, float depthBias, float slopeScaleDepthBias)
            {
                var arg0 = prim0;
                var arg1 = desc1;
                Internal.SetRasterizerState_0(__Instance, arg0, arg1, depthBias, slopeScaleDepthBias);
            }

            public void SetDepthStencilState(uint depth0, uint stencil0, uint stencil1)
            {
                var arg0 = depth0;
                var arg1 = stencil0;
                var arg2 = stencil1;
                Internal.SetDepthStencilState_0(__Instance, arg0, arg1, arg2);
            }

            public void SetBlendState(uint blend0, uint blend1, uint blend2, uint blend3, uint colorWrites)
            {
                var arg0 = blend0;
                var arg1 = blend1;
                var arg2 = blend2;
                var arg3 = blend3;
                var arg4 = colorWrites;
                Internal.SetBlendState_0(__Instance, arg0, arg1, arg2, arg3, arg4);
            }

            public void SetMarker(string markerName, uint rgbColor)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(markerName);
                var arg1 = rgbColor;
                Internal.SetMarker_0(__Instance, arg0, arg1);
                Marshal.FreeHGlobal(arg0);
            }

            public void PushMarker(string markerName, uint rgbColor)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(markerName);
                var arg1 = rgbColor;
                Internal.PushMarker_0(__Instance, arg0, arg1);
                Marshal.FreeHGlobal(arg0);
            }

            public void PopMarker()
            {
                Internal.PopMarker_0(__Instance);
            }

            public static void CreateSamplerState(Graphics.TextureFilter filter, Graphics.TextureAddressMode addressU, Graphics.TextureAddressMode addressV, Graphics.TextureAddressMode addressW, int maxAnisotropy, int maxMipLevel, float mipMapLevelOfDetailBias, out uint desc0, out uint desc1, out uint desc2, out uint desc3)
            {
                var arg0 = filter;
                var arg1 = addressU;
                var arg2 = addressV;
                var arg3 = addressW;
                uint _desc0;
                var arg7 = &_desc0;
                uint _desc1;
                var arg8 = &_desc1;
                uint _desc2;
                var arg9 = &_desc2;
                uint _desc3;
                var arg10 = &_desc3;
                Internal.CreateSamplerState_0(arg0, arg1, arg2, arg3, maxAnisotropy, maxMipLevel, mipMapLevelOfDetailBias, arg7, arg8, arg9, arg10);
                desc0 = _desc0;
                desc1 = _desc1;
                desc2 = _desc2;
                desc3 = _desc3;
            }

            public static void CreateRasterizerState(Graphics.CullMode cullMode, Graphics.FillMode fillMode, bool multiSampleAntiAlias, bool scissorTestEnable, out uint prim0, out uint flag1)
            {
                var arg0 = cullMode;
                var arg1 = fillMode;
                uint _prim0;
                var arg4 = &_prim0;
                uint _flag1;
                var arg5 = &_flag1;
                Internal.CreateRasterizerState_0(arg0, arg1, multiSampleAntiAlias, scissorTestEnable, arg4, arg5);
                prim0 = _prim0;
                flag1 = _flag1;
            }

            public static void CreateDepthStencilState(bool depthBufferEnable, bool depthBufferWriteEnable, Graphics.StencilOperation ccwStencilDepthFail, Graphics.StencilOperation ccwStencilFail, Graphics.CompareFunction ccwStencilFunction, Graphics.StencilOperation ccwStencilPass, Graphics.CompareFunction depthBufferFunction, byte referenceStencil, Graphics.StencilOperation stencilDepthBufferFail, bool stencilEnable, Graphics.StencilOperation stencilFail, Graphics.CompareFunction stencilFunction, byte stencilMask, Graphics.StencilOperation stencilPass, byte stencilWriteMask, bool twoSidedStencilMode, out uint depth0, out uint stencil0, out uint stencil1)
            {
                var arg2 = ccwStencilDepthFail;
                var arg3 = ccwStencilFail;
                var arg4 = ccwStencilFunction;
                var arg5 = ccwStencilPass;
                var arg6 = depthBufferFunction;
                var arg7 = referenceStencil;
                var arg8 = stencilDepthBufferFail;
                var arg10 = stencilFail;
                var arg11 = stencilFunction;
                var arg12 = stencilMask;
                var arg13 = stencilPass;
                var arg14 = stencilWriteMask;
                uint _depth0;
                var arg16 = &_depth0;
                uint _stencil0;
                var arg17 = &_stencil0;
                uint _stencil1;
                var arg18 = &_stencil1;
                Internal.CreateDepthStencilState_0(depthBufferEnable, depthBufferWriteEnable, arg2, arg3, arg4, arg5, arg6, arg7, arg8, stencilEnable, arg10, arg11, arg12, arg13, arg14, twoSidedStencilMode, arg16, arg17, arg18);
                depth0 = _depth0;
                stencil0 = _stencil0;
                stencil1 = _stencil1;
            }

            public static void CreateBlendState(Graphics.Blend colorSourceBlend, Graphics.Blend colorDestBlend, Graphics.BlendFunction colorBlendFunc, Graphics.Blend alphaSourceBlend, Graphics.Blend alphaDestBlend, Graphics.BlendFunction alphaBlendFunc, out uint blend)
            {
                var arg0 = colorSourceBlend;
                var arg1 = colorDestBlend;
                var arg2 = colorBlendFunc;
                var arg3 = alphaSourceBlend;
                var arg4 = alphaDestBlend;
                var arg5 = alphaBlendFunc;
                uint _blend;
                var arg6 = &_blend;
                Internal.CreateBlendState_0(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
                blend = _blend;
            }

            public Graphics.VertexBuffer VertexBuffer
            {
                set
                {
                    var arg0 = value == (Graphics.VertexBuffer) null ? global::System.IntPtr.Zero : value.__Instance;
                    Internal.SetVertexBuffer_0(__Instance, arg0);
                }
            }

            public Graphics.IndexBuffer IndexBuffer
            {
                set
                {
                    var arg0 = value == (Graphics.IndexBuffer) null ? global::System.IntPtr.Zero : value.__Instance;
                    Internal.SetIndexBuffer_0(__Instance, arg0);
                }
            }

            public Graphics.PixelShader PixelShader
            {
                set
                {
                    var arg0 = value == (Graphics.PixelShader) null ? global::System.IntPtr.Zero : value.__Instance;
                    Internal.SetPixelShader_0(__Instance, arg0);
                }
            }
        }
    }
}
